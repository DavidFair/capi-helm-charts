#!/usr/bin/env python3

#####
# This script accepts a name, a target directory and a stream of manifests
# on stdin and creates an ephemeral Helm chart in the specified directory
#
# This allows Helm release semantics to be used with manifests generated by
# other tools that are missing that functionality, e.g. kustomize
#
# In particular, the Helm release semantics give us:
#   * The tracking of resources across releases
#   * Removal of resources that no longer exist
#   * Logic for waiting for resources to become ready
#####

import pathlib
import re
import sys

from ruamel import yaml


CHART_YAML = """\
apiVersion: v2
name: {name}
version: 0.1.0
"""


def main(name, directory):
    # Make sure that the crd and templates directories exist within the chart directory
    directory = pathlib.Path(directory).resolve()
    crds_directory = directory / "crds"
    chart_directory = directory / "chart"
    crds_directory.mkdir(parents = True, exist_ok = True)
    templates_directory = chart_directory / "templates"
    templates_directory.mkdir(parents = True, exist_ok = True)
    # Write the Chart.yaml file
    chart_file = chart_directory / "Chart.yaml"
    with chart_file.open("w") as f:
        f.write(CHART_YAML.format(name = name))
    # For each YAML document in the stdin, write it to a separate file in the given directory
    # CRDs go in the crds directory and everything else in the chart's templates directory
    for document in yaml.safe_load_all(sys.stdin):
        filename = "{}_{}_{}_{}.yaml".format(
            document["apiVersion"].replace("/", "_"),
            document["kind"].lower(),
            document["metadata"].get("namespace", ""),
            document["metadata"]["name"]
        )
        if document["kind"] == "CustomResourceDefinition":
            path = crds_directory / filename
        else:
            path = templates_directory / filename
        # Escape any go template syntax in the resulting document
        # Note that we only need to escape the starting delimiters as ending delimiters
        # are ignored without the corresponding start delimiter
        content = yaml.safe_dump(document, default_flow_style = False)
        content = re.sub(r"\{\{\-?", "{{ \"\g<0>\" }}", content)
        with path.open("w") as f:
            f.write(content)


if __name__ == "__main__":
    name, directory = sys.argv[1:]
    main(name, directory)
