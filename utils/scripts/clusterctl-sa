#!/bin/sh

set -eo pipefail

#####
# This script allows clusterctl to be used with a service account by generating
# a kubeconfig to use from the service account details
#####

export KUBECONFIG="${TMPDIR:-/tmp}/kubeconfig.sa"

if [ ! -r "$KUBECONFIG" ]; then
    SA_DIR="${SA_DIR:-/var/run/secrets/kubernetes.io/serviceaccount}"
    CA_DATA="$(cat $SA_DIR/ca.crt | base64 | tr -d '\n')"
    SA_NAMESPACE="$(cat $SA_DIR/namespace)"
    SA_TOKEN="$(cat $SA_DIR/token)"
    cat > $KUBECONFIG <<EOF
apiVersion: v1
kind: Config
clusters:
  - name: default-cluster
    cluster:
      certificate-authority-data: ${CA_DATA}
      server: https://kubernetes
contexts:
  - name: default-context
    context:
      cluster: default-cluster
      namespace: ${SA_NAMESPACE}
      user: default-user
current-context: default-context
users:
  - name: default-user
    user:
      token: ${SA_TOKEN}
EOF
fi

exec clusterctl "$@"
